import { ethers } from "ethers"
import type { NextPage } from "next"
import { useRouter } from "next/router"
import { useCallback, useState } from "react"
import { useAccount, useSigner, useProvider } from "wagmi"
import Head from "next/head"
import Image from "next/image"
import Header from "../components/Header"
import styled from "styled-components"
import ProjectCard from "../components/ProjectCard"
import Footer from "../components/Footer"
import { MoonLoader } from "react-spinners"

import StaoJson from "../abi/Stao.json"
import {
  QUORUM_PERCENTAGE,
  MIN_DELAY,
  VOTING_PERIOD,
  VOTING_DELAY,
  ZORA_CREATOR,
} from "../constants"

const Content = styled.div`
  padding: 24px 60px;
`

const ProjectContainer = styled.div`
  display: flex;
  flex-direction: column;
  margin-top: 40px;
  flex-wrap: wrap;

  .title-container {
    display: flex;
    align-items: center;
  }

  .content {
    padding: 0 200px;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .dot {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: linear-gradient(
      158.55deg,
      #2ec747 3.02%,
      rgba(0, 0, 0, 0.85) 46.62%,
      #8991dc 80.72%
    );
    margin-right: 24px;
  }

  .title {
    font-weight: bold;
    font-size: 24px;
  }
`

const InputRow = styled.div`
  width: 100%;
  margin-top: 32px;
`

const Label = styled.div`
  font-size: 18px;
`

const InputText = styled.input`
  background: rgba(168, 174, 186, 0.2);
  border-radius: 8px;
  width: 100%;
  height: 40px;
  color: #fff;
  padding: 12px;
  margin-top: 8px;
  outline: none;
  border: none;

  &:focus {
    border: 1px solid #abffb5;
  }
`

const CreateButton = styled.button`
  outline: none;
  border: none;
  background: linear-gradient(
    90deg,
    #28a2b6 35.77%,
    rgba(76, 184, 121, 0.950611) 80.16%
  );
  box-shadow: inset 0px 0px 10px rgba(0, 0, 0, 0.12);
  border-radius: 12px;
  width: 100%;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 28px;
  cursor: pointer;
  color: #fff;

  &:hover {
    opacity: 0.83;
  }
`

const Create: NextPage = () => {
  const { address } = useAccount()
  const { data: signer } = useSigner()
  const router = useRouter()

  const [projectName, setProjectName] = useState<string>()
  const [symbol, setSymbol] = useState<string>()
  const [description, setDescription] = useState<string>()
  const [amount, setAmount] = useState<number>()
  const [maxContributors, setMaxContributors] = useState<number>()
  const [contribitorShareBPS, setContribitorShareBPS] = useState<number>()
  const [creatorName, setCreatorName] = useState<string>()
  const [portfolio, setPortfolio] = useState<string>()
  const [instagram, setInstagram] = useState<string>()
  const [facebook, setFacebook] = useState<string>()
  const [twitter, setTwitter] = useState<string>()
  const [loading, setLoading] = useState<boolean>(false)

  const onCreate = useCallback(async () => {
    setLoading(true)
    const provider = new ethers.providers.Web3Provider(window.ethereum as any)
    const stao = new ethers.ContractFactory(
      StaoJson.abi,
      StaoJson.bytecode,
      provider.getSigner()
    )

    try {
      const staoContract = await stao.deploy(
        projectName,
        symbol,
        description,
        ethers.utils.parseEther(amount?.toString() as string),
        maxContributors,
        contribitorShareBPS,
        MIN_DELAY,
        QUORUM_PERCENTAGE,
        VOTING_PERIOD,
        VOTING_DELAY,
        ZORA_CREATOR
      )

      await staoContract.deployed()

      router.push(`/${staoContract.address}`)
    } catch (err) {
      console.log(err)
    } finally {
      setLoading(false)
    }
  }, [
    projectName,
    symbol,
    description,
    amount,
    maxContributors,
    contribitorShareBPS,
    creatorName,
    portfolio,
    instagram,
    facebook,
    twitter,
  ])

  return (
    <div style={{ minHeight: "100vh" }}>
      <Head>
        <title>Staodio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Content>
        <div style={{ display: "flex", justifyContent: "center" }}>
          <Image src="/asset.svg" width={400} height={290} />
        </div>
        <ProjectContainer>
          <div className="title-container">
            <div className="dot" />
            <div className="title">Project Detail</div>
          </div>
          <div className="content">
            <InputRow>
              <Label>Name</Label>
              <InputText
                value={projectName}
                onChange={(e) => setProjectName(e.target.value)}
                type="text"
              />
            </InputRow>
            <InputRow>
              <Label>Symbol</Label>
              <InputText
                value={symbol}
                onChange={(e) => setSymbol(e.target.value)}
                type="text"
              />
            </InputRow>
            <InputRow>
              <Label>Description</Label>
              <InputText
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                type="text"
              />
            </InputRow>
            <InputRow>
              <Label>
                Amount <small>(MATIC)</small>
              </Label>
              <InputText
                value={amount}
                onChange={(e) => setAmount(Number(e.target.value))}
                type="number"
              />
            </InputRow>
            <InputRow>
              <Label>Max Contributors</Label>
              <InputText
                value={maxContributors}
                onChange={(e) => setMaxContributors(Number(e.target.value))}
                type="text"
              />
            </InputRow>
            <InputRow>
              <Label>Contributors Shares Percent</Label>
              <InputText
                value={contribitorShareBPS}
                onChange={(e) => setContribitorShareBPS(Number(e.target.value))}
                type="text"
              />
            </InputRow>
          </div>
        </ProjectContainer>

        <ProjectContainer>
          <div className="title-container">
            <div className="dot" />
            <div className="title">Creator Detail</div>
          </div>
          <div className="content">
            <InputRow>
              <Label>Address</Label>
              <InputText type="text" value={address} disabled />
            </InputRow>
            <InputRow>
              <Label>Name</Label>
              <InputText
                value={creatorName}
                onChange={(e) => setCreatorName(e.target.value)}
                type="text"
              />
            </InputRow>
            <InputRow>
              <Label>Portfolio</Label>
              <InputText
                value={portfolio}
                onChange={(e) => setPortfolio(e.target.value)}
                type="text"
              />
            </InputRow>
            <InputRow>
              <Label>Instagram</Label>
              <InputText
                value={instagram}
                onChange={(e) => setInstagram(e.target.value)}
                type="text"
              />
            </InputRow>
            <InputRow>
              <Label>Facebook</Label>
              <InputText
                value={facebook}
                onChange={(e) => setFacebook(e.target.value)}
                type="text"
              />
            </InputRow>
            <InputRow>
              <Label>Twitter</Label>
              <InputText
                value={twitter}
                onChange={(e) => setTwitter(e.target.value)}
                type="text"
              />
            </InputRow>
            <CreateButton disabled={loading} onClick={onCreate}>
              {loading && <MoonLoader size={24} />}
              <span style={{ marginLeft: 12 }}>Create</span>
            </CreateButton>
          </div>
        </ProjectContainer>
      </Content>
      <Footer />
    </div>
  )
}

export default Create
