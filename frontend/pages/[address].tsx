import {
  useContractReads,
  useContractWrite,
  usePrepareContractWrite,
} from "wagmi"
import type { NextPage } from "next"
import Head from "next/head"
import { ethers } from "ethers"
import { useRouter } from "next/router"
import Image from "next/image"
import Header from "../components/Header"
import styled from "styled-components"
import Footer from "../components/Footer"
import StaoJson from "../abi/Stao.json"
import Skeleton from "react-loading-skeleton"
import ProjectSetting from "../components/ProjectSetting"
import { shortAddress } from "../helper"
import { ProjectState } from "../types"

const Content = styled.div`
  padding: 24px 60px;
`

const ProjectDetail = styled.div`
  display: flex;
  align-items: flex-start;
  justify-content: space-between;

  .left {
    width: 50%;
    .title {
      display: flex;
      align-items: flex-start;
      border-bottom: 1px solid #bcffd7;
      padding-bottom: 12px;

      .project-detail {
        margin-left: 36px;
        h1 {
          margin: 0;
        }
      }
    }

    .description {
      margin-top: 24px;
      color: #d9d9d9;
    }
  }

  .right {
    background: linear-gradient(
      180deg,
      rgba(217, 217, 217, 0.25) 0%,
      rgba(217, 217, 217, 0) 0.01%
    );
    backdrop-filter: blur(50px);
    border-radius: 12px;

    padding: 28px;
    border: 1px solid #2ec747;
    width: 500px;

    .row {
      color: #8991dc;
      font-weight: 600;
      display: flex;
      justify-content: space-between;
      margin: 12px;
    }

    .amount {
      text-shadow: 0px 0px 20px rgba(255, 255, 255, 0.5);
      font-size: 32px;
      margin: 16px;
    }
  }
`

const TitleContainer = styled.div`
  display: flex;
  align-items: center;
  .dot {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: linear-gradient(
      158.55deg,
      #2ec747 3.02%,
      rgba(0, 0, 0, 0.85) 46.62%,
      #8991dc 80.72%
    );
    margin-right: 24px;
  }

  .header {
    font-weight: bold;
    font-size: 24px;
  }
`

const CreatorDetail = styled.div`
  display: flex;
  flex-direction: column;
  margin-top: 40px;
  flex-wrap: wrap;

  .title-container {
    display: flex;
    align-items: center;
  }

  .content {
    padding: 0 200px;
    display: flex;
    flex-direction: column;
    justify-content: center;

    .detail {
      margin-bottom: 12px;
      display: flex;
      flex-direction: column;
      span {
        margin-bottom: 4px;
      }
    }
  }
`

const CreateButton = styled.button`
  background: linear-gradient(
    90deg,
    #28a2b6 35.77%,
    rgba(76, 184, 121, 0.950611) 80.16%
  );
  color: #fff;
  outline: none;
  border: none;
  box-shadow: inset 0px 0px 10px rgba(0, 0, 0, 0.12);
  border-radius: 12px;
  width: 100%;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 28px;
  cursor: pointer;

  &:hover {
    opacity: 0.83;
  }
`

const Create: NextPage = () => {
  const router = useRouter()
  const { address } = router.query

  const projectContract = {
    addressOrName: address as string,
    contractInterface: StaoJson.abi,
  }

  const { data, isError, isLoading }: any = useContractReads({
    watch: true,
    contracts: [
      {
        ...projectContract,
        functionName: "name",
      },
      {
        ...projectContract,
        functionName: "description",
      },
      {
        ...projectContract,
        functionName: "amountPerContributor",
      },
      {
        ...projectContract,
        functionName: "maxContributors",
      },
      {
        ...projectContract,
        functionName: "contribitorShareBPS",
      },
      {
        ...projectContract,
        functionName: "contributorsAmount",
      },
      {
        ...projectContract,
        functionName: "projectState",
      },
      {
        ...projectContract,
        functionName: "owner",
      },
      {
        ...projectContract,
        functionName: "staoGovern",
      },
      {
        ...projectContract,
        functionName: "staoImplement",
      },
    ],
  })

  const [
    projectName,
    projectDescription,
    amountPerContributor,
    maxContributors,
    contritorShareBPS,
    contributorsAmount,
    projectState,
    projectOwner,
    projectGovernance,
    projectImplement,
  ]: any = data || ["", "", "0", "0", "0", "0", 0, "", "", ""]

  const { config } = usePrepareContractWrite({
    ...projectContract,
    functionName: "contribute",
    overrides: {
      value: ethers.utils.parseEther("0.001"),
    },
  })
  const { write: onContribute } = useContractWrite(config)

  return (
    <div style={{ minHeight: "100vh" }}>
      <Head>
        <title>Staodio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Content>
        <ProjectDetail>
          <div className="left">
            <div className="title">
              <Image src="/dog-small.svg" width={80} height={80} />
              <div className="project-detail">
                <h1>{isLoading ? <Skeleton /> : projectName}</h1>
                <p>{isLoading ? <Skeleton /> : shortAddress(projectOwner)}</p>
              </div>
            </div>
            <div className="description">
              <TitleContainer>
                <div className="dot" />
                <div className="header">Project Description</div>
              </TitleContainer>
              <p>
                Lorem Ipsum is simply dummy text of the printing and typesetting
                industry. Lorem Ipsum has been the industry's standard dummy
                text ever since the 1500s, when an unknown printer took a galley
                of type and scrambled it to make a type specimen book. It has
                survived not only five
              </p>
            </div>
          </div>
          <div className="right">
            <div className="row">Funding Goals</div>
            <div className="amount">
              {isLoading || !data ? (
                <Skeleton />
              ) : (
                Number(ethers.utils.formatEther(amountPerContributor || "0")) *
                Number(maxContributors)
              )}{" "}
              Matic
            </div>
            <div className="row">
              <span>Amount:</span>
              <span>
                {isLoading ? (
                  <Skeleton />
                ) : (
                  Number(ethers.utils.formatEther(amountPerContributor || "0"))
                )}{" "}
                Matic
              </span>
            </div>
            <div className="row">
              <span>Contributors Shares Percent:</span>
              <span>
                {isLoading ? <Skeleton /> : Number(contritorShareBPS || "0")}%
              </span>
            </div>
            <div className="row">
              <span>Remain:</span>
              <span>
                {isLoading ? (
                  <Skeleton />
                ) : (
                  Number(maxContributors) - Number(contributorsAmount || "0")
                )}
              </span>
            </div>
            <div className="row">
              <span>Max Contributor:</span>
              <span>
                {isLoading ? <Skeleton /> : Number(maxContributors || "0")}{" "}
              </span>
            </div>
            {projectState === ProjectState.RaiseFunding && (
              <CreateButton
                disabled={!onContribute}
                onClick={() => onContribute?.()}
              >
                Contribute
              </CreateButton>
            )}
          </div>
        </ProjectDetail>
        {projectState ? (
          <ProjectSetting
            projectState={projectState}
            projectContract={projectContract}
            projectGovernance={projectGovernance}
            projectImplement={projectImplement}
            projectOwner={projectOwner}
          />
        ) : (
          ""
        )}
        <CreatorDetail>
          <TitleContainer>
            <div className="dot" />
            <div className="header">Creator Detail</div>
          </TitleContainer>
          <div className="content">
            <Image src="/cat-bg.svg" width={640} height={460} />
            <div style={{ marginTop: 16 }} className="detail">
              <span>Portfolio:</span>
              <b>gangKantapat.me</b>
            </div>
            <div className="detail">
              <span>Portfolio:</span>
              <b>gangKantapat.me</b>
            </div>
            <div className="detail">
              <span>Portfolio:</span>
              <b>gangKantapat.me</b>
            </div>
          </div>
        </CreatorDetail>
      </Content>
      <Footer />
    </div>
  )
}

export default Create
